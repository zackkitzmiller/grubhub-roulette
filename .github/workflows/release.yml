name: 🚀 Release to Chrome Web Store

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  # Use the reusable validation workflow
  validate:
    uses: ./.github/workflows/validate.yml
    with:
      run-tests: false # Skip tests for faster release validation

  build-and-publish:
    name: 📦 Build & Publish Extension
    runs-on: ubuntu-latest
    needs: validate # Only run after validation passes
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: |
          # Install jq for JSON validation and zip for packaging
          sudo apt-get update
          sudo apt-get install -y jq zip

      - name: 📋 Update version from release
        id: set_version
        run: |
          echo "📋 Updating version from release tag..."

          # Get version from ref (remove 'v' prefix if present)
          VERSION=${GITHUB_REF_NAME#v}

          # If ref is not a semver (e.g., 'main'), ignore it so we derive X.Y.Z.r
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.[1-9][0-9]*)?$ ]]; then
            VERSION=""
          fi

          # If no version (manual run), derive X.Y.Z.r from manifest.json and existing tags
          if [ -z "$VERSION" ]; then
            echo "No release tag provided. Deriving version..."

            # Read base version (X.Y.Z) from manifest.json
            BASE_VERSION=$(jq -r '.version' manifest.json)
            if [[ "$BASE_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
            else
              echo "❌ Could not parse base version from manifest.json: $BASE_VERSION"
              echo "Expected format X.Y.Z"
              exit 1
            fi

            # Ensure we have all tags locally
            git fetch --tags --force --prune || true

            # Find highest existing release number for vX.Y.Z.r and increment. First release is .1 (never .0)
            HIGHEST_R=$(git tag -l "v${MAJOR}.${MINOR}.${PATCH}.*" | sed -E 's/^v[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+)$/\1/' | sort -n | tail -1)
            if [ -n "$HIGHEST_R" ]; then
              R=$((HIGHEST_R + 1))
            else
              R=1
            fi

            VERSION="${MAJOR}.${MINOR}.${PATCH}.${R}"
          fi

          echo "Version: $VERSION"

          # Update manifest.json version
          jq --arg version "$VERSION" '.version = $version' manifest.json > manifest.json.tmp
          mv manifest.json.tmp manifest.json

          # Update package.json version
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          echo "✅ Updated version to $VERSION"

          # Export VERSION for later steps
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🏗️ Build extension package
        run: |
          echo "🏗️ Building extension package..."

          # Create build directory
          mkdir -p build

          # Copy all necessary files to build directory
          cp manifest.json build/
          cp popup.html build/
          cp -r css/ build/
          cp -r js/ build/
          cp -r icons/ build/

          # Create zip file for Chrome Web Store
          cd build
          zip -r ../grubhub-roulette-v${VERSION}.zip . -x "*.DS_Store" "*.git*" "*.md" "tests/*" "docs/*" ".github/*"
          cd ..

          echo "✅ Extension package created: grubhub-roulette-v${VERSION}.zip"

          # List contents for verification
          echo "📦 Package contents:"
          unzip -l grubhub-roulette-v${VERSION}.zip

      - name: 📤 Upload to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          file-path: grubhub-roulette-v${{ steps.set_version.outputs.version }}.zip
          publish: true

      - name: 📊 Create release summary
        run: |
          echo "📊 Release Summary"
          echo "=================="
          echo "✅ Extension built successfully"
          echo "✅ Version: $VERSION"
          echo "✅ Package: grubhub-roulette-v${VERSION}.zip"
          echo "✅ Published to Chrome Web Store"
          echo ""
          echo "🎉 Release completed successfully!"

      - name: 🧾 Create Git tag and GitHub release (manual)
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set_version.outputs.version }}
          name: v${{ steps.set_version.outputs.version }}
          body: |
            Automated release created from manual workflow run.
            ci:manual-release
          files: |
            grubhub-roulette-v${{ steps.set_version.outputs.version }}.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: grubhub-roulette-v${{ steps.set_version.outputs.version }}
          path: |
            grubhub-roulette-v${{ steps.set_version.outputs.version }}.zip
            build/
          retention-days: 30
